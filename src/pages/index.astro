---
import Header from '../components/Header.astro';
import Main from '../components/Main.astro';
import Footer from '../components/Footer.astro';
import "../styles/global.css";
import "../styles/header.css";
import "../styles/main.css";
import "../styles/footer.css";
import "../styles/about.css";
import "../styles/experiencia.css";
import "../styles/proyectos.css";
import "../styles/skills.css";
import "../styles/contacto.css";

---

<html lang="es">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/logo.png" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Javier Ruiz Molero</title>
		<meta name="description" content="Portfolio de Javier Ruiz Molero, desarrollador web especializado en crear sitios con código limpio, buenas prácticas y rendimiento óptimo.">
		<meta name="keywords" content="Javier Ruiz Molero, desarrollador web, portfolio, proyectos, habilidades, trabajos, desarrollo web, front-end, back-end, código limpio, mejores prácticas, rendimiento web">
		<meta name="author" content="Javier Ruiz Molero">
		<meta property="og:title" content="Portfolio Javier Ruiz Molero">
		<meta property="og:description" content="Portfolio de Javier Ruiz Molero, desarrollador web que da vida a las ideas con código limpio y buenas prácticas.">
		<meta property="og:image" content="./imgs/javier.webp">
		<meta property="og:type" content="website">
		<meta property="og:url" content="https://javierm.dev">
		<meta property="og:site_name" content="Javier Ruiz Molero">
		<link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@500;700&family=Exo+2:wght@400;600&display=swap" rel="stylesheet">

	</head>
	<body>
		<div class="animated-background"></div>
    <div class="stars" id="stars-container"></div>
    <div class="nebula nebula-1"></div>
    <div class="nebula nebula-2"></div>
    <div class="nebula nebula-3"></div>
    <div class="connection-lines" id="lines-container"></div>
    <div class="grid-overlay"></div>
    <div class="light-pulse pulse-1"></div>
    <div class="light-pulse pulse-2"></div>
    <div class="light-pulse pulse-3"></div>
    <canvas id="particles-canvas"></canvas>
		<Header />
		<Main />
		<Footer/>
	</body>
</html>
<script>
	// Crear estrellas dinámicas
	function createStars() {
		const starsContainer = document.getElementById('stars-container');
		const starCount = 150;

		for (let i = 0; i < starCount; i++) {
			const star = document.createElement('div');
			star.className = 'star';
			
			// Posición aleatoria
			const left = Math.random() * 100;
			const top = Math.random() * 100;
			
			// Tamaño aleatorio
			const size = Math.random() * 2 + 1;
			
			// Duración y delay aleatorios
			const duration = Math.random() * 5 + 3;
			const delay = Math.random() * 5;
			
			star.style.cssText = `
				left: ${left}%;
				top: ${top}%;
				width: ${size}px;
				height: ${size}px;
				--duration: ${duration}s;
				--delay: ${delay}s;
			`;
			
			starsContainer.appendChild(star);
		}
	}

	// Crear líneas de conexión
	function createConnectionLines() {
		const linesContainer = document.getElementById('lines-container');
		const lineCount = 20;

		for (let i = 0; i < lineCount; i++) {
			const line = document.createElement('div');
			line.className = 'line';
			
			// Posición vertical aleatoria
			const top = Math.random() * 100;
			
			// Duración y delay aleatorios
			const duration = Math.random() * 20 + 10;
			const delay = Math.random() * 15;
			
			line.style.cssText = `
				top: ${top}%;
				--line-duration: ${duration}s;
				--line-delay: ${delay}s;
			`;
			
			linesContainer.appendChild(line);
		}
	}

	// Sistema de partículas con Canvas
	function initParticles() {
		const canvas = document.getElementById('particles-canvas');
		const ctx = canvas.getContext('2d');
		
		// Ajustar tamaño del canvas
		function resizeCanvas() {
			canvas.width = window.innerWidth;
			canvas.height = window.innerHeight;
		}
		
		resizeCanvas();
		window.addEventListener('resize', resizeCanvas);

		// Configuración de partículas
		const particles = [];
		const particleCount = 80;

		class Particle {
			constructor() {
				this.reset();
			}
			
			reset() {
				this.x = Math.random() * canvas.width;
				this.y = Math.random() * canvas.height;
				this.size = Math.random() * 2 + 0.5;
				this.speedX = Math.random() * 0.5 - 0.25;
				this.speedY = Math.random() * 0.5 - 0.25;
				this.color = `rgba(124, 58, 237, ${Math.random() * 0.3 + 0.1})`;
				this.alpha = Math.random() * 0.5 + 0.2;
			}
			
			update() {
				this.x += this.speedX;
				this.y += this.speedY;
				
				// Rebotar en los bordes
				if (this.x < 0 || this.x > canvas.width) this.speedX *= -1;
				if (this.y < 0 || this.y > canvas.height) this.speedY *= -1;
				
				// Fade in/out
				this.alpha += Math.random() * 0.02 - 0.01;
				this.alpha = Math.max(0.1, Math.min(0.6, this.alpha));
			}
			
			draw() {
				ctx.save();
				ctx.globalAlpha = this.alpha;
				ctx.fillStyle = this.color;
				ctx.beginPath();
				ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
				ctx.fill();
				ctx.restore();
			}
		}

		// Crear partículas
		for (let i = 0; i < particleCount; i++) {
			particles.push(new Particle());
		}

		// Animación
		function animate() {
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			
			// Dibujar conexiones
			ctx.strokeStyle = 'rgba(124, 58, 237, 0.1)';
			ctx.lineWidth = 0.5;
			
			for (let i = 0; i < particles.length; i++) {
				for (let j = i + 1; j < particles.length; j++) {
					const dx = particles[i].x - particles[j].x;
					const dy = particles[i].y - particles[j].y;
					const distance = Math.sqrt(dx * dx + dy * dy);
					
					if (distance < 100) {
						ctx.beginPath();
						ctx.moveTo(particles[i].x, particles[i].y);
						ctx.lineTo(particles[j].x, particles[j].y);
						ctx.stroke();
					}
				}
			}
			
			// Actualizar y dibujar partículas
			particles.forEach(particle => {
				particle.update();
				particle.draw();
			});
			
			requestAnimationFrame(animate);
		}
		
		animate();
	}

	// Inicializar todos los efectos cuando cargue la página
	document.addEventListener('DOMContentLoaded', function() {
		createStars();
		createConnectionLines();
		initParticles();
		
		// Efecto de parallax para las nebulosas
		window.addEventListener('scroll', function() {
			const scrolled = window.pageYOffset;
			const nebula1 = document.querySelector('.nebula-1');
			const nebula2 = document.querySelector('.nebula-2');
			const nebula3 = document.querySelector('.nebula-3');
			
			nebula1.style.transform = `translate(${scrolled * 0.02}px, ${scrolled * 0.03}px)`;
			nebula2.style.transform = `translate(${scrolled * -0.01}px, ${scrolled * 0.02}px)`;
			nebula3.style.transform = `translate(${scrolled * 0.015}px, ${scrolled * -0.01}px)`;
		});
	});
	// Menu toggle functionality
document.addEventListener('DOMContentLoaded', () => {
  const menuToggle = document.getElementById('menu-toggle');
  const mainNav = document.getElementById('main-nav');
  const body = document.body;

  menuToggle.addEventListener('click', () => {
    menuToggle.classList.toggle('active');
    mainNav.classList.toggle('open');
    body.style.overflow = mainNav.classList.contains('open') ? 'hidden' : '';
  });

  // Close menu when clicking on nav links
  const navLinks = document.querySelectorAll('.nav-link');
  navLinks.forEach(link => {
    link.addEventListener('click', () => {
      menuToggle.classList.remove('active');
      mainNav.classList.remove('open');
      body.style.overflow = '';
    });
  });

  // Header scroll effect
  const header = document.getElementById('header');
  window.addEventListener('scroll', () => {
    if (window.scrollY > 100) {
      header.classList.add('scrolled');
    } else {
      header.classList.remove('scrolled');
    }
  });

  // Active section highlighting
  const sections = document.querySelectorAll('section[id]');
  const observerOptions = {
    root: null,
    rootMargin: '-20% 0px -80% 0px',
    threshold: 0
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const id = entry.target.getAttribute('id');
        navLinks.forEach(link => {
          link.classList.remove('active');
          if (link.getAttribute('href') === `#${id}`) {
            link.classList.add('active');
          }
        });
      }
    });
  }, observerOptions);

  sections.forEach(section => {
    observer.observe(section);
  });
});
</script>
